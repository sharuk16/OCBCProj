@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@using Microsoft.AspNetCore.Http
<h1>Windows Hello Settings</h1>
<div>@ViewData["Message"]</div>
 
        <div id="disableWindowsHello">
        <div class="container">
            <div class="row">
                <div class="col-6">
                    Disable Windows Hello:
                </div>
                <div class="col-6">
                    <button id="Disable">Disable Windows Hello</button>
                </div>

            </div>
        </div>
            </div>
    <div id="enableWindowsHello">
        <div class="container">
            <div class="row">
                <div class="col-6">
                    Enable for Windows Hello:
                </div>
                <div class="col-6">
                    <button id="Enable">Enable Windows Hello</button>
                </div>
            </div>
        </div>
    </div>

@section Scripts{
    <script src="https://cdn.passwordless.dev/dist/0.2.0/passwordless.iife.js"
            crossorigin="anonymous"></script>
    <script>
var value = ""+@Context.Session.GetString("windowsHello")
    $(document).ready(function () {

        if(value == "1") {
            $("#enableWindowsHello").hide()
            $("#disableWindowsHello").show()
        }
        else {
            $("#enableWindowsHello").show()
            $("#disableWindowsHello").hide()
        }
    })
    </script>
<script>
    const API_KEY = "Xiang:public:c386297a606f4af8a997cac6b7ebf410 "; // Replace this value with your API Key
    const BACKEND_URL = "";
    async function RegisterPasswordless(e) {
        e.preventDefault();
        /**
         * Initiate the Passwordless client with your public api key
         */
        const p = new Passwordless.Client({
            apiKey: API_KEY,
        });

        /**
         * Create token - Call backend to retrieve a token that register a key to an alias
         */
        const myToken = await fetch(
            BACKEND_URL + "/createtoken"
        ).then((r) => r.text());
        
        /**
         *  Register a key - The Passwordless API and browser creates and stores a key, based on the token.
         */
        try {
            await p.register(myToken);
            const wait = await fetch(
                BACKEND_URL + "/update"
            )
            location.reload()
        } catch (e) {
            console.error("Things went bad", e);
        }
    }

    document
        .getElementById("Enable")
        .addEventListener("click", RegisterPasswordless);
</script>
<script>
    async function Delete(e) {
        e.preventDefault();
        try {
            const myToken = await fetch(
                BACKEND_URL + "/delete"
            ).then();
            location.reload()
        } catch (e) {
            console.error("Things went bad", e);
        }
    }

    document
        .getElementById("Disable")
        .addEventListener("click", Delete);
</script>
}